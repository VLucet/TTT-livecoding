---
title: "TTT Livecoding: Teaching with Slides"
author: "Valentin Lucet"
format: 
  clean-revealjs:
  # revealjs: 
    # theme: [custom.scss]
    slide-number: true
    show-slide-number: print
    preview-links: true
    # embed-resources: true 
    chalkboard: true
    multiplex: true
    transition: slide
filters:
  - webr
  - code-fullscreen
---


## What I'll cover

-   Quarto slides as teaching tools
-   Quarto code chunks as *live coding* help
-   Quarto-webr extension for interactive slides (limited to R code)

## About Quarto

**An open-source scientific and technical publishing system**

-   Create **dynamic content** with Python, R, Julia, and Observable.

-   Publish reproducible, **presentations**, dashboards, websites, blogs, and books in HTML, PDF, MS Word, ePub, etc...

-   Write using **Pandoc** markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.

-   Successor of **Rmarkdown** and **Xaringan** slides: more flexible, extensible, inter-operable and also faster

## Quarto slides

-   Quarto presentations allow you to include **code chunks** for students to follow along as you code

-   They are produced from a "quarto markdown" document, which is "knitted" into **revealjs** slides

![](https://static.slid.es/reveal/logo-v1/reveal-white-text.svg){fig-align="center" width="266"}

## Quarto slides

-   Instead of having a presentation AND a script for students to follow, or simply relying on students to type all the code, your slides can serve as both your primary **presentation** and **teaching** material: student can use the qmd file as a script.

-   In addition, even if you rely on students to type out the code, or to copy it (which is more accessible for slow typers), we all know something can still go wrong, and knitted presentations can serve as a back up results to still progress through the material

## Slides basics

-   You can add slide numbers to your presentation

-   Easy to incorporate navigation to [external websites](https://events.digital-research.academy/event/32/)

-   Slide tone function to play a subtle sound when you change slides (accessibility feature)

-   Presentations can be configured to step through slides automatically (or use slide timing)

-   Can be published to PDF, html (self contained)

-   Chalkboard option

-   Multiplex option

## Reveal JS basics

Similar to other markdown formats.

::: incremental
-   Lists can be...
-   ... incremental
:::

. . .

::: nonincremental
-   Or not!
-   Whatever you prefer
:::

. . .

## Reveal JS basics

You can organise information in columns...

::: columns
::: {.column width="50%"}
Left column
:::

::: {.column width="50%"}
Right column
:::
:::

... of variable widths

::: columns
::: {.column width="70%"}
Left column
:::

::: {.column width="30%"}
Right column
:::
:::

also: speaker notes, themes, asides & footnotes, footer, logo etc...

## Reveal JS basics

::: panel-tabset
### Problem

Content for Problem

### Solution

Content for Solution
:::

## Advanced Reveal JS

-   Custom background
-   Custom template
-   Slide transitions
-   Slide visibility
-   Presentation size
-   Stack layout of images

## Advanced Reveal JS {auto-animate="true"}

::: {style="margin-top: 100px;"}
Animating content
:::

## Advanced Reveal JS {auto-animate="true"}

::: {style="margin-top: 200px; font-size: 3em; color: red;"}
Animating content
:::

## Advanced Reveal JS {auto-animate="true"}

Animation

## Advanced Reveal JS {auto-animate="true"}

Implicit

Animation

## Advanced Reveal JS {auto-animate="true" auto-animate-easing="ease-in-out"}

::: r-hstack
::: {data-id="box1" auto-animate-delay="0" style="background: #2780e3; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box2" auto-animate-delay="0.1" style="background: #3fb618; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box3" auto-animate-delay="0.2" style="background: #e83e8c; width: 200px; height: 150px; margin: 10px;"}
:::
:::

## Advanced Reveal JS {auto-animate="true" auto-animate-easing="ease-in-out"}

::: r-stack
::: {data-id="box1" style="background: #2780e3; width: 350px; height: 350px; border-radius: 200px;"}
:::

::: {data-id="box2" style="background: #3fb618; width: 250px; height: 250px; border-radius: 200px;"}
:::

::: {data-id="box3" style="background: #e83e8c; width: 150px; height: 150px; border-radius: 200px;"}
:::
:::

## Advanced Reveal JS

::: fragment
Fade in
:::

::: {.fragment .fade-out}
Fade out
:::

::: {.fragment .highlight-red}
Highlight red
:::

::: {.fragment .fade-in-then-out}
Fade in, then out
:::

::: {.fragment .fade-up}
Slide up while fading in
:::

::: {.fragment .fade-in}
::: {.fragment .highlight-red}
::: {.fragment .semi-fade-out}
Fade in \> Turn red \> Semi fade out
:::
:::
:::

## Advanced Reveal JS

And more:

-   parallax background, vertical slides, touch navigation, additionnal Reveal Plugins

## Code chunks

Code chunks have options just like in RMarkdown. You can just have the code without running it:


```{r, eval=FALSE, echo=TRUE}
mod <- lm(mpg ~ cyl, data = mtcars)
```


Or you can output the results, without including code:


```{r, eval=TRUE, echo=FALSE}
mod <- lm(mpg ~ cyl, data = mtcars)
print(mod)
```


Or both:


```{r, eval=TRUE, echo=TRUE}
mod$coefficients
```


## Other languages


```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```


<!-- ## Other languages -->

<!-- ```{julia} -->

<!-- #| label: fig-parametric -->

<!-- #| fig-cap: "Parametric Plots" -->

<!-- using Plots -->

<!-- plot(sin,  -->

<!--      x->sin(2x),  -->

<!--      0,  -->

<!--      2Ï€,  -->

<!--      leg=false,  -->

<!--      fill=(0,:lavender)) -->

<!-- ``` -->

## Code chunks animation {auto-animate="true"}


```{r, eval=TRUE, echo=TRUE}
# Start with simple plot
plot(mtcars$cyl, mtcars$mpg)
```


## Code chunks animation {auto-animate="true"}


```{r, eval=TRUE, echo=TRUE}
# Start with simple plot
plot(mtcars$cyl, mtcars$mpg)
# Add fitted line
abline(mod)
```


## Code chunks animation {auto-animate="true"}

We can use animations to show how code is written sequentially


```{r, eval=FALSE, echo=TRUE}
# Start with simple plot
plot(mtcars$cyl, mtcars$mpg)
# Add fitted line
abline(mod)
```


## Code chunks animation {auto-animate="true"}

We can use animations to show how code is written sequentially


```{r, eval=FALSE, echo=TRUE}
# Start with simple plot
plot(mtcars$cyl, mtcars$mpg)
# Add fitted line
abline(mod)

# Create an empty function:
make_plot <- function(x, y, model) {

}
```


## Code chunks animation {auto-animate="true"}

We can use animations to show how code is written sequentially


```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "8-9"
# Start with simple plot
plot(mtcars$cyl, mtcars$mpg)
# Add fitted line
abline(mod)

# Create an empty fucntion:
make_plot <- function(x, y, model) {
  plot(mtcars$cyl, mtcars$mpg)
  abline(mod)
}
```


## Code chunks animation {auto-animate="true"}

We can use animations to show how code is written sequentially


```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "8-9"
# Start with simple plot
plot(mtcars$cyl, mtcars$mpg)
# Add fitted line
abline(mod)

# Create an empty fucntion:
make_plot <- function(x, y, model) {
  plot(x, y)
  abline(model)
}
```


## Code chunks animation {auto-animate="true"}

We can use animations to show how code is written sequentially


```{r, eval=TRUE, echo=TRUE}
# Create an empty fucntion:
make_plot <- function(x, y, model) {
  plot(x, y)
  abline(model)
}

# Call the function
make_plot(mtcars$cyl, mtcars$mpg, mod)
```


## Useful extensions

-   many themes like this presentation's theme `quarto-revealjs-clean`

-   `code-fullscreen`; allows you to open code in full screen, which is useful for sharing large scripts

-   `webr` ; allows for live editing of slides, but experimental! Webr is based on webassembly, which bundles the R runtime for the browser (not a technically accurate description)

## Quarto-webr

With webr, code chunks can be edited directly for live coding purposes

```{webr-r}
mod <- lm(mpg ~ cyl, data = mtcars)
coefficients(mod)
plot(mod)
```

## Packages available with webr

-   webR reports the number of packages available in two ways:

1.  Built R packages: This indicates the number of R packages with WebAssembly binaries that can be used within webR, although they may have a decreased number of features available.

2.  Available R packages: This number represents feature-complete R packages that have all their dependencies compiled and are fully functional within webR.

-   To achieve parity with base R, the Available R packages metric serves as an indicator of whether R scripts may require further modification to function properly within webR.

## Packages available with webr


```{r, eval=TRUE, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"

# Determine the version of R being used by webR 
major_minor_version <- paste(
  R.version$major, 
  strsplit(R.version$minor, ".", fixed = TRUE)[[1L]][1L],
  sep = "."
)

# Obtain a list of packages
webr_info <- as.data.frame(
  available.packages(
    contriburl = paste0(
      "https://repo.r-wasm.org/bin/emscripten/contrib/", 
      major_minor_version
    )
  )
)

# Obtain the number of R packages built
n_webr_pkgs <- nrow(webr_info)

# Number of R packages available to webR
cat("There are current", n_webr_pkgs, 
    "available to use with webR!\n")

# Only view the first few, there's a lot available!
head(webr_info[, c("Version", "License")], n = 15)
```


## Loading packages

To automatically install packages when the document opens, packages can be specidied in the document header.

To install and load interactively:

```{webr-r}
webr::install("ggplot2")

library("ggplot2")
```

## Using installed packages

```{webr-r}
ggplot(mpg, aes(displ, hwy, colour = class)) + 
  geom_point()
```

## Using the context Option

-  interactive (include: true): Show both code and results

-  output (echo: false): Suppress showing code, but display the results

-  setup (include: false): Suppress showing both code and results


